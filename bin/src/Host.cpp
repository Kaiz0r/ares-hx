// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Host
#include <Host.h>
#endif
#ifndef INCLUDED_cpp_cppia_Host
#include <cpp/cppia/Host.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#include <hx/Scriptable.h>

HX_LOCAL_STACK_FRAME(_hx_pos_bda8f22250d3264b_3_main,"Host","main",0xf5141edf,"Host.main","Host.hx",3,0x978b2c36)

void Host_obj::__construct() { }

Dynamic Host_obj::__CreateEmpty() { return new Host_obj; }

void *Host_obj::_hx_vtable = 0;

Dynamic Host_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Host_obj > _hx_result = new Host_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Host_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2febfb88;
}

void Host_obj::main(){
            	HX_STACKFRAME(&_hx_pos_bda8f22250d3264b_3_main)
HXLINE(   4)		::haxe::Log_obj::trace(HX_("Hello from cppia HOST",b5,a7,98,75),hx::SourceInfo(HX_("Host.hx",36,2c,8b,97),4,HX_("Host",88,fb,eb,2f),HX_("main",39,38,56,48)));
HXLINE(   5)		::String scriptname = HX_("bin/script.cppia",a0,4e,e3,e2);
HXLINE(   6)		::cpp::cppia::Host_obj::runFile(scriptname);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Host_obj,main,(void))


Host_obj::Host_obj()
{
}

bool Host_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Host_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Host_obj_sStaticStorageInfo = 0;
#endif

class Host_obj__scriptable : public Host_obj {
   typedef Host_obj__scriptable __ME;
   typedef Host_obj super;
   typedef Host_obj __superString;
   HX_DEFINE_SCRIPTABLE(HX_ARR_LIST0)
	HX_DEFINE_SCRIPTABLE_DYNAMIC;
};


static void CPPIA_CALL __s_main(hx::CppiaCtx *ctx) {
Host_obj::main();
}
#ifndef HXCPP_CPPIA_SUPER_ARG
#define HXCPP_CPPIA_SUPER_ARG(x)
#endif
static hx::ScriptNamedFunction __scriptableFunctions[] = {
  hx::ScriptNamedFunction("main",__s_main,"v", true HXCPP_CPPIA_SUPER_ARG(0) ),
  hx::ScriptNamedFunction(0,0,0 HXCPP_CPPIA_SUPER_ARG(0) ) };
hx::Class Host_obj::__mClass;

hx::ScriptFunction Host_obj::__script_construct(0,0);
static ::String Host_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Host_obj::__register()
{
	Host_obj _hx_dummy;
	Host_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Host",88,fb,eb,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Host_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Host_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Host_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Host_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Host_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
  HX_SCRIPTABLE_REGISTER_CLASS("Host",Host_obj);
}

