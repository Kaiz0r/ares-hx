// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_Template
#include <haxe/Template.h>
#endif
#ifndef INCLUDED_haxe__Template_TemplateExpr
#include <haxe/_Template/TemplateExpr.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif
#include <hx/Scriptable.h>

HX_DEFINE_STACK_FRAME(_hx_pos_6336ddc62a4944c9_89_new,"haxe.Template","new",0xf79fb394,"haxe.Template.new","/home/kaiz0r/haxe/std/haxe/Template.hx",89,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_112_execute,"haxe.Template","execute",0xab5c9769,"haxe.Template.execute","/home/kaiz0r/haxe/std/haxe/Template.hx",112,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_121_resolve,"haxe.Template","resolve",0x46afa020,"haxe.Template.resolve","/home/kaiz0r/haxe/std/haxe/Template.hx",121,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_135_parseTokens,"haxe.Template","parseTokens",0xb093fb21,"haxe.Template.parseTokens","/home/kaiz0r/haxe/std/haxe/Template.hx",135,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_182_parseBlock,"haxe.Template","parseBlock",0x90636766,"haxe.Template.parseBlock","/home/kaiz0r/haxe/std/haxe/Template.hx",182,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_209_parse,"haxe.Template","parse",0x09c7a867,"haxe.Template.parse","/home/kaiz0r/haxe/std/haxe/Template.hx",209,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_197_parse,"haxe.Template","parse",0x09c7a867,"haxe.Template.parse","/home/kaiz0r/haxe/std/haxe/Template.hx",197,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_294_parseExpr,"haxe.Template","parseExpr",0xc6f8913c,"haxe.Template.parseExpr","/home/kaiz0r/haxe/std/haxe/Template.hx",294,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_263_parseExpr,"haxe.Template","parseExpr",0xc6f8913c,"haxe.Template.parseExpr","/home/kaiz0r/haxe/std/haxe/Template.hx",263,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_323_makeConst,"haxe.Template","makeConst",0x1a2ab2c9,"haxe.Template.makeConst","/home/kaiz0r/haxe/std/haxe/Template.hx",323,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_302_makeConst,"haxe.Template","makeConst",0x1a2ab2c9,"haxe.Template.makeConst","/home/kaiz0r/haxe/std/haxe/Template.hx",302,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_307_makeConst,"haxe.Template","makeConst",0x1a2ab2c9,"haxe.Template.makeConst","/home/kaiz0r/haxe/std/haxe/Template.hx",307,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_312_makeConst,"haxe.Template","makeConst",0x1a2ab2c9,"haxe.Template.makeConst","/home/kaiz0r/haxe/std/haxe/Template.hx",312,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_318_makeConst,"haxe.Template","makeConst",0x1a2ab2c9,"haxe.Template.makeConst","/home/kaiz0r/haxe/std/haxe/Template.hx",318,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_339_makePath,"haxe.Template","makePath",0xc73bdaff,"haxe.Template.makePath","/home/kaiz0r/haxe/std/haxe/Template.hx",339,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_327_makePath,"haxe.Template","makePath",0xc73bdaff,"haxe.Template.makePath","/home/kaiz0r/haxe/std/haxe/Template.hx",327,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_344_makeExpr,"haxe.Template","makeExpr",0xc007f28f,"haxe.Template.makeExpr","/home/kaiz0r/haxe/std/haxe/Template.hx",344,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_347_skipSpaces,"haxe.Template","skipSpaces",0xd1de4018,"haxe.Template.skipSpaces","/home/kaiz0r/haxe/std/haxe/Template.hx",347,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_360_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",360,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_426_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",426,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_414_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",414,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_417_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",417,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_393_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",393,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_387_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",387,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_390_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",390,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_396_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",396,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_402_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",402,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_408_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",408,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_411_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",411,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_399_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",399,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_405_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",405,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_420_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",420,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_433_makeExpr2,"haxe.Template","makeExpr2",0x46ec4ac3,"haxe.Template.makeExpr2","/home/kaiz0r/haxe/std/haxe/Template.hx",433,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_440_run,"haxe.Template","run",0xf7a2ca7f,"haxe.Template.run","/home/kaiz0r/haxe/std/haxe/Template.hx",440,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_58_boot,"haxe.Template","boot",0xac366e7e,"haxe.Template.boot","/home/kaiz0r/haxe/std/haxe/Template.hx",58,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_59_boot,"haxe.Template","boot",0xac366e7e,"haxe.Template.boot","/home/kaiz0r/haxe/std/haxe/Template.hx",59,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_60_boot,"haxe.Template","boot",0xac366e7e,"haxe.Template.boot","/home/kaiz0r/haxe/std/haxe/Template.hx",60,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_61_boot,"haxe.Template","boot",0xac366e7e,"haxe.Template.boot","/home/kaiz0r/haxe/std/haxe/Template.hx",61,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_62_boot,"haxe.Template","boot",0xac366e7e,"haxe.Template.boot","/home/kaiz0r/haxe/std/haxe/Template.hx",62,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_68_boot,"haxe.Template","boot",0xac366e7e,"haxe.Template.boot","/home/kaiz0r/haxe/std/haxe/Template.hx",68,0xae0938cb)
HX_LOCAL_STACK_FRAME(_hx_pos_6336ddc62a4944c9_71_boot,"haxe.Template","boot",0xac366e7e,"haxe.Template.boot","/home/kaiz0r/haxe/std/haxe/Template.hx",71,0xae0938cb)
namespace haxe{

void Template_obj::__construct(::String str){
            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_89_new)
HXLINE(  90)		 ::haxe::ds::List tokens = this->parseTokens(str);
HXLINE(  91)		this->expr = this->parseBlock(tokens);
HXLINE(  92)		if (!(tokens->isEmpty())) {
HXLINE(  93)			HX_STACK_DO_THROW(((HX_("Unexpected '",38,54,94,03) + ::Std_obj::string( ::Dynamic(tokens->first()->__Field(HX_("s",73,00,00,00),hx::paccDynamic)))) + HX_("'",27,00,00,00)));
            		}
            	}

Dynamic Template_obj::__CreateEmpty() { return new Template_obj; }

void *Template_obj::_hx_vtable = 0;

Dynamic Template_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Template_obj > _hx_result = new Template_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Template_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f5fb6c0;
}

::String Template_obj::execute( ::Dynamic context, ::Dynamic macros){
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_112_execute)
HXLINE( 113)		 ::Dynamic _hx_tmp;
HXDLIN( 113)		if (hx::IsNull( macros )) {
HXLINE( 113)			_hx_tmp =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
            		else {
HXLINE( 113)			_hx_tmp = macros;
            		}
HXDLIN( 113)		this->macros = _hx_tmp;
HXLINE( 114)		this->context = context;
HXLINE( 115)		this->stack =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 116)		this->buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 117)		this->run(this->expr);
HXLINE( 118)		return this->buf->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Template_obj,execute,return )

 ::Dynamic Template_obj::resolve(::String v){
            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_121_resolve)
HXLINE( 122)		if ((v == HX_("__current__",79,78,5a,6f))) {
HXLINE( 123)			return this->context;
            		}
HXLINE( 124)		 ::Dynamic value = ::Reflect_obj::getProperty(this->context,v);
HXLINE( 125)		bool _hx_tmp;
HXDLIN( 125)		if (hx::IsNull( value )) {
HXLINE( 125)			_hx_tmp = ::Reflect_obj::hasField(this->context,v);
            		}
            		else {
HXLINE( 125)			_hx_tmp = true;
            		}
HXDLIN( 125)		if (_hx_tmp) {
HXLINE( 126)			return value;
            		}
HXLINE( 127)		{
HXLINE( 127)			 ::haxe::ds::_List::ListNode _g_head = this->stack->h;
HXDLIN( 127)			while(hx::IsNotNull( _g_head )){
HXLINE( 127)				 ::Dynamic val = _g_head->item;
HXDLIN( 127)				_g_head = _g_head->next;
HXDLIN( 127)				 ::Dynamic ctx = val;
HXLINE( 128)				value = ::Reflect_obj::getProperty(ctx,v);
HXLINE( 129)				bool _hx_tmp1;
HXDLIN( 129)				if (hx::IsNull( value )) {
HXLINE( 129)					_hx_tmp1 = ::Reflect_obj::hasField(ctx,v);
            				}
            				else {
HXLINE( 129)					_hx_tmp1 = true;
            				}
HXDLIN( 129)				if (_hx_tmp1) {
HXLINE( 130)					return value;
            				}
            			}
            		}
HXLINE( 132)		return ::Reflect_obj::field(::haxe::Template_obj::globals,v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,resolve,return )

 ::haxe::ds::List Template_obj::parseTokens(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_135_parseTokens)
HXLINE( 136)		 ::haxe::ds::List tokens =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 137)		while(::haxe::Template_obj::splitter->match(data)){
HXLINE( 138)			 ::Dynamic p = ::haxe::Template_obj::splitter->matchedPos();
HXLINE( 139)			if (hx::IsGreater( p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic),0 )) {
HXLINE( 140)				tokens->add( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("l",6c,00,00,00),null())
            					->setFixed(1,HX_("p",70,00,00,00),data.substr(0,p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)))
            					->setFixed(2,HX_("s",73,00,00,00),true)));
            			}
HXLINE( 143)			if (hx::IsEq( data.charCodeAt(( (int)(p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) )),58 )) {
HXLINE( 144)				tokens->add( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("l",6c,00,00,00),null())
            					->setFixed(1,HX_("p",70,00,00,00),data.substr(( (int)((p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic) + 2)) ),(( (int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ) - 4)))
            					->setFixed(2,HX_("s",73,00,00,00),false)));
HXLINE( 145)				data = ::haxe::Template_obj::splitter->matchedRight();
HXLINE( 146)				continue;
            			}
HXLINE( 150)			int parp = ( (int)((p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic) + p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic))) );
HXLINE( 151)			int npar = 1;
HXLINE( 152)			::Array< ::String > params = ::Array_obj< ::String >::__new(0);
HXLINE( 153)			::String part = HX_("",00,00,00,00);
HXLINE( 154)			while(true){
HXLINE( 155)				 ::Dynamic c = data.charCodeAt(parp);
HXLINE( 156)				parp = (parp + 1);
HXLINE( 157)				if (hx::IsEq( c,40 )) {
HXLINE( 158)					npar = (npar + 1);
            				}
            				else {
HXLINE( 159)					if (hx::IsEq( c,41 )) {
HXLINE( 160)						npar = (npar - 1);
HXLINE( 161)						if ((npar <= 0)) {
HXLINE( 162)							goto _hx_goto_5;
            						}
            					}
            					else {
HXLINE( 163)						if (hx::IsNull( c )) {
HXLINE( 164)							HX_STACK_DO_THROW(HX_("Unclosed macro parenthesis",c7,16,f6,c7));
            						}
            					}
            				}
HXLINE( 166)				bool _hx_tmp;
HXDLIN( 166)				if (hx::IsEq( c,44 )) {
HXLINE( 166)					_hx_tmp = (npar == 1);
            				}
            				else {
HXLINE( 166)					_hx_tmp = false;
            				}
HXDLIN( 166)				if (_hx_tmp) {
HXLINE( 167)					params->push(part);
HXLINE( 168)					part = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 170)					part = (part + ::String::fromCharCode(( (int)(c) )));
            				}
            			}
            			_hx_goto_5:;
HXLINE( 173)			params->push(part);
HXLINE( 174)			tokens->add( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("l",6c,00,00,00),params)
            				->setFixed(1,HX_("p",70,00,00,00),::haxe::Template_obj::splitter->matched(2))
            				->setFixed(2,HX_("s",73,00,00,00),false)));
HXLINE( 175)			data = data.substr(parp,(data.length - parp));
            		}
HXLINE( 177)		if ((data.length > 0)) {
HXLINE( 178)			tokens->add( ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("l",6c,00,00,00),null())
            				->setFixed(1,HX_("p",70,00,00,00),data)
            				->setFixed(2,HX_("s",73,00,00,00),true)));
            		}
HXLINE( 179)		return tokens;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,parseTokens,return )

 ::haxe::_Template::TemplateExpr Template_obj::parseBlock( ::haxe::ds::List tokens){
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_182_parseBlock)
HXLINE( 183)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 184)		while(true){
HXLINE( 185)			 ::Dynamic t = tokens->first();
HXLINE( 186)			if (hx::IsNull( t )) {
HXLINE( 187)				goto _hx_goto_7;
            			}
HXLINE( 188)			bool _hx_tmp;
HXDLIN( 188)			if (!(( (bool)(t->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) ))) {
HXLINE( 188)				bool _hx_tmp1;
HXDLIN( 188)				if (hx::IsNotEq( t->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_("end",db,03,4d,00) )) {
HXLINE( 188)					_hx_tmp1 = hx::IsEq( t->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_("else",b9,e4,14,43) );
            				}
            				else {
HXLINE( 188)					_hx_tmp1 = true;
            				}
HXDLIN( 188)				if (!(_hx_tmp1)) {
HXLINE( 188)					_hx_tmp = (( (::String)(t->__Field(HX_("p",70,00,00,00),hx::paccDynamic)) ).substr(0,7) == HX_("elseif ",8a,1a,aa,10));
            				}
            				else {
HXLINE( 188)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 188)				_hx_tmp = false;
            			}
HXDLIN( 188)			if (_hx_tmp) {
HXLINE( 189)				goto _hx_goto_7;
            			}
HXLINE( 190)			l->add(this->parse(tokens));
            		}
            		_hx_goto_7:;
HXLINE( 192)		if ((l->length == 1)) {
HXLINE( 193)			return l->first().StaticCast<  ::haxe::_Template::TemplateExpr >();
            		}
HXLINE( 194)		return ::haxe::_Template::TemplateExpr_obj::OpBlock(l);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,parseBlock,return )

 ::haxe::_Template::TemplateExpr Template_obj::parse( ::haxe::ds::List tokens){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,p) HXARGC(1)
            		int _hx_run(::String kwd){
            			HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_209_parse)
HXLINE( 210)			int pos = -1;
HXLINE( 211)			int length = kwd.length;
HXLINE( 212)			if ((p->__get(0).substr(0,length) == kwd)) {
HXLINE( 213)				pos = length;
HXLINE( 214)				{
HXLINE( 214)					int _g_offset = 0;
HXDLIN( 214)					::String _g_s = p->__get(0).substr(length,null());
HXDLIN( 214)					while((_g_offset < _g_s.length)){
HXLINE( 214)						_g_offset = (_g_offset + 1);
HXDLIN( 214)						int c = _g_s.cca((_g_offset - 1));
HXLINE( 215)						if ((c == 32)) {
HXLINE( 216)							pos = (pos + 1);
            						}
            						else {
HXLINE( 217)							goto _hx_goto_10;
            						}
            					}
            					_hx_goto_10:;
            				}
            			}
HXLINE( 221)			return pos;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_197_parse)
HXLINE( 198)		 ::Dynamic t = tokens->pop();
HXLINE( 199)		::Array< ::String > p = ::Array_obj< ::String >::__new(1)->init(0, ::Dynamic(t->__Field(HX_("p",70,00,00,00),hx::paccDynamic)));
HXLINE( 200)		if (( (bool)(t->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) )) {
HXLINE( 201)			return ::haxe::_Template::TemplateExpr_obj::OpStr(p->__get(0));
            		}
HXLINE( 203)		if (hx::IsNotNull( t->__Field(HX_("l",6c,00,00,00),hx::paccDynamic) )) {
HXLINE( 204)			 ::haxe::ds::List pe =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 205)			{
HXLINE( 205)				int _g = 0;
HXDLIN( 205)				::Array< ::String > _g1 = ( (::Array< ::String >)(t->__Field(HX_("l",6c,00,00,00),hx::paccDynamic)) );
HXDLIN( 205)				while((_g < _g1->length)){
HXLINE( 205)					::String p1 = _g1->__get(_g);
HXDLIN( 205)					_g = (_g + 1);
HXLINE( 206)					pe->add(this->parseBlock(this->parseTokens(p1)));
            				}
            			}
HXLINE( 207)			return ::haxe::_Template::TemplateExpr_obj::OpMacro(p->__get(0),pe);
            		}
HXLINE( 209)		 ::Dynamic kwdEnd =  ::Dynamic(new _hx_Closure_0(p));
HXLINE( 224)		int pos1 = ( (int)(kwdEnd(HX_("if",dd,5b,00,00))) );
HXLINE( 225)		if ((pos1 > 0)) {
HXLINE( 226)			::String _hx_tmp = p->__get(0).substr(pos1,(p->__get(0).length - pos1));
HXDLIN( 226)			p[0] = _hx_tmp;
HXLINE( 227)			 ::Dynamic e = this->parseExpr(p->__get(0));
HXLINE( 228)			 ::haxe::_Template::TemplateExpr eif = this->parseBlock(tokens);
HXLINE( 229)			 ::Dynamic t1 = tokens->first();
HXLINE( 230)			 ::haxe::_Template::TemplateExpr eelse;
HXLINE( 231)			if (hx::IsNull( t1 )) {
HXLINE( 232)				HX_STACK_DO_THROW(HX_("Unclosed 'if'",fe,74,80,71));
            			}
HXLINE( 233)			if (hx::IsEq( t1->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_("end",db,03,4d,00) )) {
HXLINE( 234)				tokens->pop();
HXLINE( 235)				eelse = null();
            			}
            			else {
HXLINE( 236)				if (hx::IsEq( t1->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_("else",b9,e4,14,43) )) {
HXLINE( 237)					tokens->pop();
HXLINE( 238)					eelse = this->parseBlock(tokens);
HXLINE( 239)					t1 = tokens->pop();
HXLINE( 240)					bool _hx_tmp1;
HXDLIN( 240)					if (hx::IsNotNull( t1 )) {
HXLINE( 240)						_hx_tmp1 = hx::IsNotEq( t1->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_("end",db,03,4d,00) );
            					}
            					else {
HXLINE( 240)						_hx_tmp1 = true;
            					}
HXDLIN( 240)					if (_hx_tmp1) {
HXLINE( 241)						HX_STACK_DO_THROW(HX_("Unclosed 'else'",a2,29,dd,e0));
            					}
            				}
            				else {
HXLINE( 243)					t1->__SetField(HX_("p",70,00,00,00),( (::String)(t1->__Field(HX_("p",70,00,00,00),hx::paccDynamic)) ).substr(4,(( (::String)(t1->__Field(HX_("p",70,00,00,00),hx::paccDynamic)) ).length - 4)),hx::paccDynamic);
HXLINE( 244)					eelse = this->parse(tokens);
            				}
            			}
HXLINE( 246)			return ::haxe::_Template::TemplateExpr_obj::OpIf(e,eif,eelse);
            		}
HXLINE( 248)		int pos2 = ( (int)(kwdEnd(HX_("foreach",8a,fd,e4,d9))) );
HXLINE( 249)		if ((pos2 >= 0)) {
HXLINE( 250)			::String _hx_tmp2 = p->__get(0).substr(pos2,(p->__get(0).length - pos2));
HXDLIN( 250)			p[0] = _hx_tmp2;
HXLINE( 251)			 ::Dynamic e1 = this->parseExpr(p->__get(0));
HXLINE( 252)			 ::haxe::_Template::TemplateExpr efor = this->parseBlock(tokens);
HXLINE( 253)			 ::Dynamic t2 = tokens->pop();
HXLINE( 254)			bool _hx_tmp3;
HXDLIN( 254)			if (hx::IsNotNull( t2 )) {
HXLINE( 254)				_hx_tmp3 = hx::IsNotEq( t2->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_("end",db,03,4d,00) );
            			}
            			else {
HXLINE( 254)				_hx_tmp3 = true;
            			}
HXDLIN( 254)			if (_hx_tmp3) {
HXLINE( 255)				HX_STACK_DO_THROW(HX_("Unclosed 'foreach'",89,5b,50,42));
            			}
HXLINE( 256)			return ::haxe::_Template::TemplateExpr_obj::OpForeach(e1,efor);
            		}
HXLINE( 258)		if (::haxe::Template_obj::expr_splitter->match(p->__get(0))) {
HXLINE( 259)			return ::haxe::_Template::TemplateExpr_obj::OpExpr(this->parseExpr(p->__get(0)));
            		}
HXLINE( 260)		return ::haxe::_Template::TemplateExpr_obj::OpVar(p->__get(0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,parse,return )

 ::Dynamic Template_obj::parseExpr(::String data){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,e,::String,expr) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_294_parseExpr)
HXLINE( 294)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 295)				return e();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic exc = _hx_e;
HXLINE( 297)					::String _hx_tmp = ((HX_("Error : ",1e,f8,c3,b8) + ::Std_obj::string(exc)) + HX_(" in ",7b,e0,76,15));
HXDLIN( 297)					HX_STACK_DO_THROW((_hx_tmp + expr));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 294)			return null();
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_263_parseExpr)
HXLINE( 264)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 265)		::String expr = data;
HXLINE( 266)		while(::haxe::Template_obj::expr_splitter->match(data)){
HXLINE( 267)			 ::Dynamic p = ::haxe::Template_obj::expr_splitter->matchedPos();
HXLINE( 268)			int k = ( (int)((p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic) + p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic))) );
HXLINE( 269)			if (hx::IsNotEq( p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic),0 )) {
HXLINE( 270)				l->add( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("p",70,00,00,00),data.substr(0,p->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)))
            					->setFixed(1,HX_("s",73,00,00,00),true)));
            			}
HXLINE( 271)			::String p1 = ::haxe::Template_obj::expr_splitter->matched(0);
HXLINE( 272)			l->add( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("p",70,00,00,00),p1)
            				->setFixed(1,HX_("s",73,00,00,00),(p1.indexOf(HX_("\"",22,00,00,00),null()) >= 0))));
HXLINE( 273)			data = ::haxe::Template_obj::expr_splitter->matchedRight();
            		}
HXLINE( 275)		if ((data.length != 0)) {
HXLINE( 276)			int _g_offset = 0;
HXDLIN( 276)			::String _g_s = data;
HXDLIN( 276)			while((_g_offset < _g_s.length)){
HXLINE( 276)				int _g1_key = _g_offset;
HXDLIN( 276)				_g_offset = (_g_offset + 1);
HXDLIN( 276)				int _g1_value = _g_s.cca((_g_offset - 1));
HXDLIN( 276)				int i = _g1_key;
HXDLIN( 276)				int c = _g1_value;
HXLINE( 277)				if ((c != 32)) {
HXLINE( 280)					l->add( ::Dynamic(hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("p",70,00,00,00),data.substr(i,null()))
            						->setFixed(1,HX_("s",73,00,00,00),true)));
HXLINE( 281)					goto _hx_goto_14;
            				}
            			}
            			_hx_goto_14:;
            		}
HXLINE( 285)		 ::Dynamic e;
HXLINE( 286)		try {
            			HX_STACK_CATCHABLE(::String, 0);
HXLINE( 287)			e = this->makeExpr(l);
HXLINE( 288)			if (!(l->isEmpty())) {
HXLINE( 289)				HX_STACK_DO_THROW( ::Dynamic(l->first()->__Field(HX_("p",70,00,00,00),hx::paccDynamic)));
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass< ::String >() && _hx_e->toString()!=null() ){
            				HX_STACK_BEGIN_CATCH
            				::String s = _hx_e;
HXLINE( 291)				HX_STACK_DO_THROW((((HX_("Unexpected '",38,54,94,03) + s) + HX_("' in ",22,80,17,8a)) + expr));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 293)		return  ::Dynamic(new _hx_Closure_0(e,expr));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,parseExpr,return )

 ::Dynamic Template_obj::makeConst(::String v){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::haxe::Template,me,::String,v) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_323_makeConst)
HXLINE( 323)			return me->resolve(v);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_302_makeConst)
HXLINE( 303)		::haxe::Template_obj::expr_trim->match(v);
HXLINE( 304)		v = ::haxe::Template_obj::expr_trim->matched(1);
HXLINE( 305)		if (hx::IsEq( v.charCodeAt(0),34 )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,str) HXARGC(0)
            			::String _hx_run(){
            				HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_307_makeConst)
HXLINE( 307)				return str;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 306)			::String str = v.substr(1,(v.length - 2));
HXLINE( 307)			return  ::Dynamic(new _hx_Closure_0(str));
            		}
HXLINE( 309)		if (::haxe::Template_obj::expr_int->match(v)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,i) HXARGC(0)
            			 ::Dynamic _hx_run(){
            				HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_312_makeConst)
HXLINE( 312)				return i;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 310)			 ::Dynamic i = ::Std_obj::parseInt(v);
HXLINE( 311)			return  ::Dynamic(new _hx_Closure_1(i));
            		}
HXLINE( 315)		if (::haxe::Template_obj::expr_float->match(v)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,Float,f) HXARGC(0)
            			Float _hx_run(){
            				HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_318_makeConst)
HXLINE( 318)				return f;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 316)			Float f = ::Std_obj::parseFloat(v);
HXLINE( 317)			return  ::Dynamic(new _hx_Closure_2(f));
            		}
HXLINE( 321)		 ::haxe::Template me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 322)		return  ::Dynamic(new _hx_Closure_3(me,v));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,makeConst,return )

 ::Dynamic Template_obj::makePath( ::Dynamic e, ::haxe::ds::List l){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,f, ::Dynamic,e) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_339_makePath)
HXLINE( 339)			 ::Dynamic _hx_tmp2 = e();
HXDLIN( 339)			return ::Reflect_obj::field(_hx_tmp2,f);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_327_makePath)
HXLINE( 328)		 ::Dynamic p = l->first();
HXLINE( 329)		bool _hx_tmp;
HXDLIN( 329)		if (hx::IsNotNull( p )) {
HXLINE( 329)			_hx_tmp = hx::IsNotEq( p->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_(".",2e,00,00,00) );
            		}
            		else {
HXLINE( 329)			_hx_tmp = true;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 330)			return e;
            		}
HXLINE( 331)		l->pop();
HXLINE( 332)		 ::Dynamic field = l->pop();
HXLINE( 333)		bool _hx_tmp1;
HXDLIN( 333)		if (hx::IsNotNull( field )) {
HXLINE( 333)			_hx_tmp1 = !(( (bool)(field->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 333)			_hx_tmp1 = true;
            		}
HXDLIN( 333)		if (_hx_tmp1) {
HXLINE( 334)			HX_STACK_DO_THROW( ::Dynamic(field->__Field(HX_("p",70,00,00,00),hx::paccDynamic)));
            		}
HXLINE( 335)		::String f = ( (::String)(field->__Field(HX_("p",70,00,00,00),hx::paccDynamic)) );
HXLINE( 336)		::haxe::Template_obj::expr_trim->match(f);
HXLINE( 337)		f = ::haxe::Template_obj::expr_trim->matched(1);
HXLINE( 338)		return this->makePath( ::Dynamic(new _hx_Closure_0(f,e)),l);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Template_obj,makePath,return )

 ::Dynamic Template_obj::makeExpr( ::haxe::ds::List l){
            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_344_makeExpr)
HXDLIN( 344)		return this->makePath(this->makeExpr2(l),l);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,makeExpr,return )

void Template_obj::skipSpaces( ::haxe::ds::List l){
            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_347_skipSpaces)
HXLINE( 348)		 ::Dynamic p = l->first();
HXLINE( 349)		while(hx::IsNotNull( p )){
HXLINE( 350)			{
HXLINE( 350)				int _g_offset = 0;
HXDLIN( 350)				::String _g_s = ( (::String)(p->__Field(HX_("p",70,00,00,00),hx::paccDynamic)) );
HXDLIN( 350)				while((_g_offset < _g_s.length)){
HXLINE( 350)					_g_offset = (_g_offset + 1);
HXDLIN( 350)					int c = _g_s.cca((_g_offset - 1));
HXLINE( 351)					if ((c != 32)) {
HXLINE( 352)						return;
            					}
            				}
            			}
HXLINE( 355)			l->pop();
HXLINE( 356)			p = l->first();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,skipSpaces,(void))

 ::Dynamic Template_obj::makeExpr2( ::haxe::ds::List l){
            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_360_makeExpr2)
HXLINE( 361)		this->skipSpaces(l);
HXLINE( 362)		 ::Dynamic p = l->pop();
HXLINE( 363)		this->skipSpaces(l);
HXLINE( 364)		if (hx::IsNull( p )) {
HXLINE( 365)			HX_STACK_DO_THROW(HX_("<eof>",3e,ee,21,cf));
            		}
HXLINE( 366)		if (( (bool)(p->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) )) {
HXLINE( 367)			return this->makeConst(( (::String)(p->__Field(HX_("p",70,00,00,00),hx::paccDynamic)) ));
            		}
HXLINE( 368)		::String _hx_switch_0 = ( (::String)(p->__Field(HX_("p",70,00,00,00),hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("!",21,00,00,00)) ){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,e) HXARGC(0)
            			bool _hx_run(){
            				HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_426_makeExpr2)
HXLINE( 427)				 ::Dynamic v = e();
HXLINE( 428)				if (hx::IsNotNull( v )) {
HXLINE( 428)					return hx::IsEq( v,false );
            				}
            				else {
HXLINE( 428)					return true;
            				}
HXDLIN( 428)				return false;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 425)			 ::Dynamic e = this->makeExpr(l);
HXLINE( 426)			return  ::Dynamic(new _hx_Closure_0(e));
HXLINE( 424)			goto _hx_goto_28;
            		}
            		if (  (_hx_switch_0==HX_("(",28,00,00,00)) ){
HXLINE( 370)			this->skipSpaces(l);
HXLINE( 371)			 ::Dynamic e1 = this->makeExpr(l);
HXLINE( 372)			this->skipSpaces(l);
HXLINE( 373)			 ::Dynamic p1 = l->pop();
HXLINE( 374)			bool _hx_tmp;
HXDLIN( 374)			if (hx::IsNotNull( p1 )) {
HXLINE( 374)				_hx_tmp = ( (bool)(p1->__Field(HX_("s",73,00,00,00),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 374)				_hx_tmp = true;
            			}
HXDLIN( 374)			if (_hx_tmp) {
HXLINE( 375)				HX_STACK_DO_THROW(p1);
            			}
HXLINE( 376)			if (hx::IsEq( p1->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_(")",29,00,00,00) )) {
HXLINE( 377)				return e1;
            			}
HXLINE( 378)			this->skipSpaces(l);
HXLINE( 379)			 ::Dynamic e2 = this->makeExpr(l);
HXLINE( 380)			this->skipSpaces(l);
HXLINE( 381)			 ::Dynamic p2 = l->pop();
HXLINE( 382)			this->skipSpaces(l);
HXLINE( 383)			bool _hx_tmp1;
HXDLIN( 383)			if (hx::IsNotNull( p2 )) {
HXLINE( 383)				_hx_tmp1 = hx::IsNotEq( p2->__Field(HX_("p",70,00,00,00),hx::paccDynamic),HX_(")",29,00,00,00) );
            			}
            			else {
HXLINE( 383)				_hx_tmp1 = true;
            			}
HXDLIN( 383)			if (_hx_tmp1) {
HXLINE( 384)				HX_STACK_DO_THROW(p2);
            			}
HXLINE( 385)			::String _hx_switch_1 = ( (::String)(p1->__Field(HX_("p",70,00,00,00),hx::paccDynamic)) );
            			if (  (_hx_switch_1==HX_("!=",fc,1c,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_414_makeExpr2)
HXLINE( 414)					 ::Dynamic _hx_tmp2 = e1();
HXDLIN( 414)					return hx::IsNotEq( _hx_tmp2,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 413)				return  ::Dynamic(new _hx_Closure_1(e2,e1));
HXDLIN( 413)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("&&",40,21,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_417_makeExpr2)
HXLINE( 417)					bool _hx_tmp3;
HXDLIN( 417)					if (( (bool)(e1()) )) {
HXLINE( 417)						_hx_tmp3 = ( (bool)(e2()) );
            					}
            					else {
HXLINE( 417)						_hx_tmp3 = false;
            					}
HXDLIN( 417)					return _hx_tmp3;
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 416)				return  ::Dynamic(new _hx_Closure_2(e2,e1));
HXDLIN( 416)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("*",2a,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_393_makeExpr2)
HXLINE( 393)					 ::Dynamic _hx_tmp4 = e1();
HXDLIN( 393)					return (( (Float)(_hx_tmp4) ) * ( (Float)(e2()) ));
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 392)				return  ::Dynamic(new _hx_Closure_3(e2,e1));
HXDLIN( 392)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("+",2b,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_387_makeExpr2)
HXLINE( 387)					 ::Dynamic _hx_tmp5 = e1();
HXDLIN( 387)					return (_hx_tmp5 + e2());
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 386)				return  ::Dynamic(new _hx_Closure_4(e2,e1));
HXDLIN( 386)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("-",2d,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_390_makeExpr2)
HXLINE( 390)					 ::Dynamic _hx_tmp6 = e1();
HXDLIN( 390)					return (( (Float)(_hx_tmp6) ) - ( (Float)(e2()) ));
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 389)				return  ::Dynamic(new _hx_Closure_5(e2,e1));
HXDLIN( 389)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("/",2f,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_6, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_396_makeExpr2)
HXLINE( 396)					 ::Dynamic _hx_tmp7 = e1();
HXDLIN( 396)					return (( (Float)(_hx_tmp7) ) / ( (Float)(e2()) ));
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 395)				return  ::Dynamic(new _hx_Closure_6(e2,e1));
HXDLIN( 395)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("<",3c,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_402_makeExpr2)
HXLINE( 402)					 ::Dynamic _hx_tmp8 = e1();
HXDLIN( 402)					return hx::IsLess( _hx_tmp8,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 401)				return  ::Dynamic(new _hx_Closure_7(e2,e1));
HXDLIN( 401)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("<=",81,34,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_408_makeExpr2)
HXLINE( 408)					 ::Dynamic _hx_tmp9 = e1();
HXDLIN( 408)					return hx::IsLessEq( _hx_tmp9,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 407)				return  ::Dynamic(new _hx_Closure_8(e2,e1));
HXDLIN( 407)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("==",60,35,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_9, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_411_makeExpr2)
HXLINE( 411)					 ::Dynamic _hx_tmp10 = e1();
HXDLIN( 411)					return hx::IsEq( _hx_tmp10,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 410)				return  ::Dynamic(new _hx_Closure_9(e2,e1));
HXDLIN( 410)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_(">",3e,00,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_10, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_399_makeExpr2)
HXLINE( 399)					 ::Dynamic _hx_tmp11 = e1();
HXDLIN( 399)					return hx::IsGreater( _hx_tmp11,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 398)				return  ::Dynamic(new _hx_Closure_10(e2,e1));
HXDLIN( 398)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_(">=",3f,36,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_11, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_405_makeExpr2)
HXLINE( 405)					 ::Dynamic _hx_tmp12 = e1();
HXDLIN( 405)					return hx::IsGreaterEq( _hx_tmp12,e2() );
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 404)				return  ::Dynamic(new _hx_Closure_11(e2,e1));
HXDLIN( 404)				goto _hx_goto_29;
            			}
            			if (  (_hx_switch_1==HX_("||",80,6c,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_12, ::Dynamic,e2, ::Dynamic,e1) HXARGC(0)
            				 ::Dynamic _hx_run(){
            					HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_420_makeExpr2)
HXLINE( 420)					bool _hx_tmp13;
HXDLIN( 420)					if (!(( (bool)(e1()) ))) {
HXLINE( 420)						_hx_tmp13 = ( (bool)(e2()) );
            					}
            					else {
HXLINE( 420)						_hx_tmp13 = true;
            					}
HXDLIN( 420)					return _hx_tmp13;
            				}
            				HX_END_LOCAL_FUNC0(return)

HXLINE( 419)				return  ::Dynamic(new _hx_Closure_12(e2,e1));
HXDLIN( 419)				goto _hx_goto_29;
            			}
            			/* default */{
HXLINE( 422)				HX_STACK_DO_THROW( ::Dynamic((HX_("Unknown operation ",0f,7f,15,6f) + p1->__Field(HX_("p",70,00,00,00),hx::paccDynamic))));
            			}
            			_hx_goto_29:;
HXLINE( 369)			goto _hx_goto_28;
            		}
            		if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_13, ::Dynamic,e3) HXARGC(0)
            			Float _hx_run(){
            				HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_433_makeExpr2)
HXLINE( 433)				return -(e3());
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 431)			 ::Dynamic e3 = this->makeExpr(l);
HXLINE( 432)			return  ::Dynamic(new _hx_Closure_13(e3));
HXLINE( 430)			goto _hx_goto_28;
            		}
            		_hx_goto_28:;
HXLINE( 436)		HX_STACK_DO_THROW( ::Dynamic(p->__Field(HX_("p",70,00,00,00),hx::paccDynamic)));
HXDLIN( 436)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,makeExpr2,return )

void Template_obj::run( ::haxe::_Template::TemplateExpr e){
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_440_run)
HXDLIN( 440)		switch((int)(e->_hx_getIndex())){
            			case (int)0: {
HXLINE( 441)				::String v = e->_hx_getString(0);
HXLINE( 442)				{
HXLINE( 442)					 ::StringBuf _this = this->buf;
HXDLIN( 442)					::String x = ::Std_obj::string(this->resolve(v));
HXDLIN( 442)					if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 442)						_this->flush();
            					}
HXDLIN( 442)					if (hx::IsNull( _this->b )) {
HXLINE( 442)						_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            					}
            					else {
HXLINE( 442)						::Array< ::String > _this1 = _this->b;
HXDLIN( 442)						_this1->push(::Std_obj::string(x));
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 443)				 ::Dynamic e1 = e->_hx_getObject(0);
HXLINE( 444)				{
HXLINE( 444)					 ::StringBuf _this2 = this->buf;
HXDLIN( 444)					::String x1 = ::Std_obj::string(e1());
HXDLIN( 444)					if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 444)						_this2->flush();
            					}
HXDLIN( 444)					if (hx::IsNull( _this2->b )) {
HXLINE( 444)						_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            					}
            					else {
HXLINE( 444)						::Array< ::String > _this3 = _this2->b;
HXDLIN( 444)						_this3->push(::Std_obj::string(x1));
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 445)				 ::haxe::_Template::TemplateExpr eelse = e->_hx_getObject(2).StaticCast<  ::haxe::_Template::TemplateExpr >();
HXDLIN( 445)				 ::haxe::_Template::TemplateExpr eif = e->_hx_getObject(1).StaticCast<  ::haxe::_Template::TemplateExpr >();
HXDLIN( 445)				 ::Dynamic e2 = e->_hx_getObject(0);
HXDLIN( 445)				{
HXLINE( 446)					 ::Dynamic v1 = e2();
HXLINE( 447)					bool _hx_tmp;
HXDLIN( 447)					if (hx::IsNotNull( v1 )) {
HXLINE( 447)						_hx_tmp = hx::IsEq( v1,false );
            					}
            					else {
HXLINE( 447)						_hx_tmp = true;
            					}
HXDLIN( 447)					if (_hx_tmp) {
HXLINE( 448)						if (hx::IsNotNull( eelse )) {
HXLINE( 449)							this->run(eelse);
            						}
            					}
            					else {
HXLINE( 451)						this->run(eif);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 452)				::String str = e->_hx_getString(0);
HXLINE( 453)				{
HXLINE( 453)					 ::StringBuf _this4 = this->buf;
HXDLIN( 453)					if (hx::IsNotNull( _this4->charBuf )) {
HXLINE( 453)						_this4->flush();
            					}
HXDLIN( 453)					if (hx::IsNull( _this4->b )) {
HXLINE( 453)						_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(str));
            					}
            					else {
HXLINE( 453)						::Array< ::String > _this5 = _this4->b;
HXDLIN( 453)						_this5->push(::Std_obj::string(str));
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 454)				 ::haxe::ds::List l = e->_hx_getObject(0).StaticCast<  ::haxe::ds::List >();
HXLINE( 455)				{
HXLINE( 455)					 ::haxe::ds::_List::ListNode _g_head = l->h;
HXDLIN( 455)					while(hx::IsNotNull( _g_head )){
HXLINE( 455)						 ::haxe::_Template::TemplateExpr val = _g_head->item;
HXDLIN( 455)						_g_head = _g_head->next;
HXDLIN( 455)						 ::haxe::_Template::TemplateExpr e3 = val;
HXLINE( 456)						this->run(e3);
            					}
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 457)				 ::haxe::_Template::TemplateExpr loop = e->_hx_getObject(1).StaticCast<  ::haxe::_Template::TemplateExpr >();
HXDLIN( 457)				 ::Dynamic e4 = e->_hx_getObject(0);
HXDLIN( 457)				{
HXLINE( 458)					 ::Dynamic v2 = e4();
HXLINE( 459)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 460)						 ::Dynamic x2 = v2->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic)();
HXLINE( 461)						if (hx::IsNull( x2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic) )) {
HXLINE( 462)							HX_STACK_DO_THROW(null());
            						}
HXLINE( 463)						v2 = x2;
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e5 = _hx_e;
HXLINE( 465)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 466)								if (hx::IsNull( v2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic) )) {
HXLINE( 467)									HX_STACK_DO_THROW(null());
            								}
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic e6 = _hx_e;
HXLINE( 469)									HX_STACK_DO_THROW((HX_("Cannot iter on ",b6,ff,79,c3) + ::Std_obj::string(v2)));
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 471)					this->stack->push(this->context);
HXLINE( 472)					 ::Dynamic v3 = v2;
HXLINE( 473)					{
HXLINE( 473)						 ::Dynamic ctx = v3;
HXDLIN( 473)						while(( (bool)(ctx->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 473)							 ::Dynamic ctx1 = ctx->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE( 474)							this->context = ctx1;
HXLINE( 475)							this->run(loop);
            						}
            					}
HXLINE( 477)					this->context = this->stack->pop();
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 478)				 ::haxe::ds::List params = e->_hx_getObject(1).StaticCast<  ::haxe::ds::List >();
HXDLIN( 478)				::String m = e->_hx_getString(0);
HXDLIN( 478)				{
HXLINE( 479)					 ::Dynamic v4 = ::Reflect_obj::field(this->macros,m);
HXLINE( 480)					::cpp::VirtualArray pl = ::cpp::VirtualArray_obj::__new();
HXLINE( 481)					 ::StringBuf old = this->buf;
HXLINE( 482)					pl->push(this->resolve_dyn());
HXLINE( 483)					{
HXLINE( 483)						 ::haxe::ds::_List::ListNode _g_head1 = params->h;
HXDLIN( 483)						while(hx::IsNotNull( _g_head1 )){
HXLINE( 483)							 ::haxe::_Template::TemplateExpr val1 = _g_head1->item;
HXDLIN( 483)							_g_head1 = _g_head1->next;
HXDLIN( 483)							 ::haxe::_Template::TemplateExpr p = val1;
HXLINE( 484)							if ((p->_hx_getIndex() == 0)) {
HXLINE( 485)								::String v5 = p->_hx_getString(0);
HXDLIN( 485)								pl->push(this->resolve(v5));
            							}
            							else {
HXLINE( 487)								this->buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 488)								this->run(p);
HXLINE( 489)								pl->push(this->buf->toString());
            							}
            						}
            					}
HXLINE( 492)					this->buf = old;
HXLINE( 493)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 494)						 ::StringBuf _this6 = this->buf;
HXDLIN( 494)						::String x3 = ::Std_obj::string(::Reflect_obj::callMethod(this->macros,v4,pl));
HXDLIN( 494)						if (hx::IsNotNull( _this6->charBuf )) {
HXLINE( 494)							_this6->flush();
            						}
HXDLIN( 494)						if (hx::IsNull( _this6->b )) {
HXLINE( 494)							_this6->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            						}
            						else {
HXLINE( 494)							::Array< ::String > _this7 = _this6->b;
HXDLIN( 494)							_this7->push(::Std_obj::string(x3));
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e7 = _hx_e;
HXLINE( 496)							::String plstr;
HXDLIN( 496)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 496)								plstr = pl->join(HX_(",",2c,00,00,00));
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic e8 = _hx_e;
HXLINE( 496)									plstr = HX_("???",1f,05,30,00);
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
HXLINE( 497)							::String msg = ((((((HX_("Macro call ",8e,96,45,bf) + m) + HX_("(",28,00,00,00)) + plstr) + HX_(") failed (",dc,dd,a3,23)) + ::Std_obj::string(e7)) + HX_(")",29,00,00,00));
HXLINE( 501)							HX_STACK_DO_THROW(msg);
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Template_obj,run,(void))

 ::EReg Template_obj::splitter;

 ::EReg Template_obj::expr_splitter;

 ::EReg Template_obj::expr_trim;

 ::EReg Template_obj::expr_int;

 ::EReg Template_obj::expr_float;

 ::Dynamic Template_obj::globals;

 ::Dynamic Template_obj::hxKeepArrayIterator;


hx::ObjectPtr< Template_obj > Template_obj::__new(::String str) {
	hx::ObjectPtr< Template_obj > __this = new Template_obj();
	__this->__construct(str);
	return __this;
}

hx::ObjectPtr< Template_obj > Template_obj::__alloc(hx::Ctx *_hx_ctx,::String str) {
	Template_obj *__this = (Template_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Template_obj), true, "haxe.Template"));
	*(void **)__this = Template_obj::_hx_vtable;
	__this->__construct(str);
	return __this;
}

Template_obj::Template_obj()
{
}

void Template_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Template);
	HX_MARK_MEMBER_NAME(expr,"expr");
	HX_MARK_MEMBER_NAME(context,"context");
	HX_MARK_MEMBER_NAME(macros,"macros");
	HX_MARK_MEMBER_NAME(stack,"stack");
	HX_MARK_MEMBER_NAME(buf,"buf");
	HX_MARK_END_CLASS();
}

void Template_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(expr,"expr");
	HX_VISIT_MEMBER_NAME(context,"context");
	HX_VISIT_MEMBER_NAME(macros,"macros");
	HX_VISIT_MEMBER_NAME(stack,"stack");
	HX_VISIT_MEMBER_NAME(buf,"buf");
}

hx::Val Template_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { return hx::Val( buf ); }
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { return hx::Val( expr ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { return hx::Val( stack ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"macros") ) { return hx::Val( macros ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { return hx::Val( context ); }
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"makePath") ) { return hx::Val( makePath_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeExpr") ) { return hx::Val( makeExpr_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"parseExpr") ) { return hx::Val( parseExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeConst") ) { return hx::Val( makeConst_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeExpr2") ) { return hx::Val( makeExpr2_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"parseBlock") ) { return hx::Val( parseBlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipSpaces") ) { return hx::Val( skipSpaces_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseTokens") ) { return hx::Val( parseTokens_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Template_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"globals") ) { outValue = ( globals ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"splitter") ) { outValue = ( splitter ); return true; }
		if (HX_FIELD_EQ(inName,"expr_int") ) { outValue = ( expr_int ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"expr_trim") ) { outValue = ( expr_trim ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"expr_float") ) { outValue = ( expr_float ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"expr_splitter") ) { outValue = ( expr_splitter ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"hxKeepArrayIterator") ) { outValue = ( hxKeepArrayIterator ); return true; }
	}
	return false;
}

hx::Val Template_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { buf=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { expr=inValue.Cast<  ::haxe::_Template::TemplateExpr >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { stack=inValue.Cast<  ::haxe::ds::List >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"macros") ) { macros=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Template_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"globals") ) { globals=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"splitter") ) { splitter=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"expr_int") ) { expr_int=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"expr_trim") ) { expr_trim=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"expr_float") ) { expr_float=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"expr_splitter") ) { expr_splitter=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"hxKeepArrayIterator") ) { hxKeepArrayIterator=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Template_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("expr",35,fd,1d,43));
	outFields->push(HX_("context",ef,95,77,19));
	outFields->push(HX_("macros",e7,9a,8b,b0));
	outFields->push(HX_("stack",48,67,0b,84));
	outFields->push(HX_("buf",33,c3,4a,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Template_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::_Template::TemplateExpr */ ,(int)offsetof(Template_obj,expr),HX_("expr",35,fd,1d,43)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Template_obj,context),HX_("context",ef,95,77,19)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Template_obj,macros),HX_("macros",e7,9a,8b,b0)},
	{hx::fsObject /*  ::haxe::ds::List */ ,(int)offsetof(Template_obj,stack),HX_("stack",48,67,0b,84)},
	{hx::fsObject /*  ::StringBuf */ ,(int)offsetof(Template_obj,buf),HX_("buf",33,c3,4a,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Template_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::EReg */ ,(void *) &Template_obj::splitter,HX_("splitter",47,37,b0,d3)},
	{hx::fsObject /*  ::EReg */ ,(void *) &Template_obj::expr_splitter,HX_("expr_splitter",d1,62,6b,74)},
	{hx::fsObject /*  ::EReg */ ,(void *) &Template_obj::expr_trim,HX_("expr_trim",6c,bb,0b,cf)},
	{hx::fsObject /*  ::EReg */ ,(void *) &Template_obj::expr_int,HX_("expr_int",a5,8d,b8,b9)},
	{hx::fsObject /*  ::EReg */ ,(void *) &Template_obj::expr_float,HX_("expr_float",d2,5f,a9,47)},
	{hx::fsObject /*  ::Dynamic */ ,(void *) &Template_obj::globals,HX_("globals",b0,05,39,14)},
	{hx::fsObject /*  ::Dynamic */ ,(void *) &Template_obj::hxKeepArrayIterator,HX_("hxKeepArrayIterator",b2,f7,79,f0)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Template_obj_sMemberFields[] = {
	HX_("expr",35,fd,1d,43),
	HX_("context",ef,95,77,19),
	HX_("macros",e7,9a,8b,b0),
	HX_("stack",48,67,0b,84),
	HX_("buf",33,c3,4a,00),
	HX_("execute",35,0a,0d,cc),
	HX_("resolve",ec,12,60,67),
	HX_("parseTokens",ed,c3,23,0d),
	HX_("parseBlock",1a,bc,dd,de),
	HX_("parse",33,90,55,bd),
	HX_("parseExpr",08,4f,c4,ca),
	HX_("makeConst",95,70,f6,1d),
	HX_("makePath",b3,da,ef,40),
	HX_("makeExpr",43,f2,bb,39),
	HX_("skipSpaces",cc,94,58,20),
	HX_("makeExpr2",8f,08,b8,4a),
	HX_("run",4b,e7,56,00),
	::String(null()) };

static void Template_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Template_obj::splitter,"splitter");
	HX_MARK_MEMBER_NAME(Template_obj::expr_splitter,"expr_splitter");
	HX_MARK_MEMBER_NAME(Template_obj::expr_trim,"expr_trim");
	HX_MARK_MEMBER_NAME(Template_obj::expr_int,"expr_int");
	HX_MARK_MEMBER_NAME(Template_obj::expr_float,"expr_float");
	HX_MARK_MEMBER_NAME(Template_obj::globals,"globals");
	HX_MARK_MEMBER_NAME(Template_obj::hxKeepArrayIterator,"hxKeepArrayIterator");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Template_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Template_obj::splitter,"splitter");
	HX_VISIT_MEMBER_NAME(Template_obj::expr_splitter,"expr_splitter");
	HX_VISIT_MEMBER_NAME(Template_obj::expr_trim,"expr_trim");
	HX_VISIT_MEMBER_NAME(Template_obj::expr_int,"expr_int");
	HX_VISIT_MEMBER_NAME(Template_obj::expr_float,"expr_float");
	HX_VISIT_MEMBER_NAME(Template_obj::globals,"globals");
	HX_VISIT_MEMBER_NAME(Template_obj::hxKeepArrayIterator,"hxKeepArrayIterator");
};

#endif

class Template_obj__scriptable : public Template_obj {
   typedef Template_obj__scriptable __ME;
   typedef Template_obj super;
   typedef Template_obj __superString;
   HX_DEFINE_SCRIPTABLE(HX_ARR_LIST1)
	HX_DEFINE_SCRIPTABLE_DYNAMIC;
	::String execute(  ::Dynamic context, ::Dynamic macros ) {
	if (__scriptVTable[1] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushObject(context);
		__ctx->pushObject(macros);
		return __ctx->runString(__scriptVTable[1] );
	}  else return Template_obj::execute(context,macros);return null();}
	 ::Dynamic resolve( ::String v ) {
	if (__scriptVTable[2] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushString(v);
		return __ctx->runObject(__scriptVTable[2] );
	}  else return Template_obj::resolve(v);return null();}
	 ::haxe::ds::List parseTokens( ::String data ) {
	if (__scriptVTable[3] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushString(data);
		return __ctx->runObject(__scriptVTable[3] );
	}  else return Template_obj::parseTokens(data);return null();}
	 ::haxe::_Template::TemplateExpr parseBlock(  ::haxe::ds::List tokens ) {
	if (__scriptVTable[4] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushObject(tokens);
		return __ctx->runObject(__scriptVTable[4] );
	}  else return Template_obj::parseBlock(tokens);return null();}
	 ::haxe::_Template::TemplateExpr parse(  ::haxe::ds::List tokens ) {
	if (__scriptVTable[5] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushObject(tokens);
		return __ctx->runObject(__scriptVTable[5] );
	}  else return Template_obj::parse(tokens);return null();}
	 ::Dynamic parseExpr( ::String data ) {
	if (__scriptVTable[6] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushString(data);
		return __ctx->runObject(__scriptVTable[6] );
	}  else return Template_obj::parseExpr(data);return null();}
	 ::Dynamic makeConst( ::String v ) {
	if (__scriptVTable[7] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushString(v);
		return __ctx->runObject(__scriptVTable[7] );
	}  else return Template_obj::makeConst(v);return null();}
	 ::Dynamic makePath(  ::Dynamic e, ::haxe::ds::List l ) {
	if (__scriptVTable[8] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushObject(e);
		__ctx->pushObject(l);
		return __ctx->runObject(__scriptVTable[8] );
	}  else return Template_obj::makePath(e,l);return null();}
	 ::Dynamic makeExpr(  ::haxe::ds::List l ) {
	if (__scriptVTable[9] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushObject(l);
		return __ctx->runObject(__scriptVTable[9] );
	}  else return Template_obj::makeExpr(l);return null();}
	void skipSpaces(  ::haxe::ds::List l ) {
	if (__scriptVTable[10] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushObject(l);
		 __ctx->runVoid(__scriptVTable[10] );
	}  else  Template_obj::skipSpaces(l);}
	 ::Dynamic makeExpr2(  ::haxe::ds::List l ) {
	if (__scriptVTable[11] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushObject(l);
		return __ctx->runObject(__scriptVTable[11] );
	}  else return Template_obj::makeExpr2(l);return null();}
	void run(  ::haxe::_Template::TemplateExpr e ) {
	if (__scriptVTable[12] ) {
		hx::CppiaCtx *__ctx = hx::CppiaCtx::getCurrent();
		hx::AutoStack __as(__ctx);
		__ctx->pushObject(this);
		__ctx->pushObject(e);
		 __ctx->runVoid(__scriptVTable[12] );
	}  else  Template_obj::run(e);}
};


template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_execute(hx::CppiaCtx *ctx) {
ctx->returnString( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::execute(ctx->getObject(sizeof(void*)),ctx->getObject(sizeof(void*)+sizeof(void *))) : ((Template_obj*)ctx->getThis())->execute(ctx->getObject(sizeof(void*)),ctx->getObject(sizeof(void*)+sizeof(void *))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_resolve(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::resolve(ctx->getString(sizeof(void*))) : ((Template_obj*)ctx->getThis())->resolve(ctx->getString(sizeof(void*))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_parseTokens(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::parseTokens(ctx->getString(sizeof(void*))) : ((Template_obj*)ctx->getThis())->parseTokens(ctx->getString(sizeof(void*))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_parseBlock(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::parseBlock(ctx->getObject(sizeof(void*))) : ((Template_obj*)ctx->getThis())->parseBlock(ctx->getObject(sizeof(void*))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_parse(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::parse(ctx->getObject(sizeof(void*))) : ((Template_obj*)ctx->getThis())->parse(ctx->getObject(sizeof(void*))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_parseExpr(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::parseExpr(ctx->getString(sizeof(void*))) : ((Template_obj*)ctx->getThis())->parseExpr(ctx->getString(sizeof(void*))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_makeConst(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::makeConst(ctx->getString(sizeof(void*))) : ((Template_obj*)ctx->getThis())->makeConst(ctx->getString(sizeof(void*))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_makePath(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::makePath(ctx->getObject(sizeof(void*)),ctx->getObject(sizeof(void*)+sizeof(void *))) : ((Template_obj*)ctx->getThis())->makePath(ctx->getObject(sizeof(void*)),ctx->getObject(sizeof(void*)+sizeof(void *))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_makeExpr(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::makeExpr(ctx->getObject(sizeof(void*))) : ((Template_obj*)ctx->getThis())->makeExpr(ctx->getObject(sizeof(void*))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_skipSpaces(hx::CppiaCtx *ctx) {
 _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::skipSpaces(ctx->getObject(sizeof(void*))) : ((Template_obj*)ctx->getThis())->skipSpaces(ctx->getObject(sizeof(void*)));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_makeExpr2(hx::CppiaCtx *ctx) {
ctx->returnObject( _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::makeExpr2(ctx->getObject(sizeof(void*))) : ((Template_obj*)ctx->getThis())->makeExpr2(ctx->getObject(sizeof(void*))));
}

template<bool _HX_SUPER=false>
static void CPPIA_CALL __s_run(hx::CppiaCtx *ctx) {
 _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::run(ctx->getObject(sizeof(void*))) : ((Template_obj*)ctx->getThis())->run(ctx->getObject(sizeof(void*)));
}
#ifndef HXCPP_CPPIA_SUPER_ARG
#define HXCPP_CPPIA_SUPER_ARG(x)
#endif
static hx::ScriptNamedFunction __scriptableFunctions[] = {
  hx::ScriptNamedFunction("execute",__s_execute,"soo", false HXCPP_CPPIA_SUPER_ARG(__s_execute<true>) ),
  hx::ScriptNamedFunction("resolve",__s_resolve,"os", false HXCPP_CPPIA_SUPER_ARG(__s_resolve<true>) ),
  hx::ScriptNamedFunction("parseTokens",__s_parseTokens,"os", false HXCPP_CPPIA_SUPER_ARG(__s_parseTokens<true>) ),
  hx::ScriptNamedFunction("parseBlock",__s_parseBlock,"oo", false HXCPP_CPPIA_SUPER_ARG(__s_parseBlock<true>) ),
  hx::ScriptNamedFunction("parse",__s_parse,"oo", false HXCPP_CPPIA_SUPER_ARG(__s_parse<true>) ),
  hx::ScriptNamedFunction("parseExpr",__s_parseExpr,"os", false HXCPP_CPPIA_SUPER_ARG(__s_parseExpr<true>) ),
  hx::ScriptNamedFunction("makeConst",__s_makeConst,"os", false HXCPP_CPPIA_SUPER_ARG(__s_makeConst<true>) ),
  hx::ScriptNamedFunction("makePath",__s_makePath,"ooo", false HXCPP_CPPIA_SUPER_ARG(__s_makePath<true>) ),
  hx::ScriptNamedFunction("makeExpr",__s_makeExpr,"oo", false HXCPP_CPPIA_SUPER_ARG(__s_makeExpr<true>) ),
  hx::ScriptNamedFunction("skipSpaces",__s_skipSpaces,"vo", false HXCPP_CPPIA_SUPER_ARG(__s_skipSpaces<true>) ),
  hx::ScriptNamedFunction("makeExpr2",__s_makeExpr2,"oo", false HXCPP_CPPIA_SUPER_ARG(__s_makeExpr2<true>) ),
  hx::ScriptNamedFunction("run",__s_run,"vo", false HXCPP_CPPIA_SUPER_ARG(__s_run<true>) ),
  hx::ScriptNamedFunction(0,0,0 HXCPP_CPPIA_SUPER_ARG(0) ) };
hx::Class Template_obj::__mClass;


template<bool _HX_SUPER=false>
static void CPPIA_CALL __script_construct_func(hx::CppiaCtx *ctx) {
 _HX_SUPER ? ((Template_obj*)ctx->getThis())->Template_obj::__construct(ctx->getString(sizeof(void*))) : ((Template_obj*)ctx->getThis())->__construct(ctx->getString(sizeof(void*)));
}
hx::ScriptFunction Template_obj::__script_construct(__script_construct_func,"vs");
static ::String Template_obj_sStaticFields[] = {
	HX_("splitter",47,37,b0,d3),
	HX_("expr_splitter",d1,62,6b,74),
	HX_("expr_trim",6c,bb,0b,cf),
	HX_("expr_int",a5,8d,b8,b9),
	HX_("expr_float",d2,5f,a9,47),
	HX_("globals",b0,05,39,14),
	HX_("hxKeepArrayIterator",b2,f7,79,f0),
	::String(null())
};

void Template_obj::__register()
{
	Template_obj _hx_dummy;
	Template_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.Template",a2,99,b9,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Template_obj::__GetStatic;
	__mClass->mSetStaticField = &Template_obj::__SetStatic;
	__mClass->mMarkFunc = Template_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Template_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Template_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Template_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Template_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Template_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Template_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
  HX_SCRIPTABLE_REGISTER_CLASS("haxe.Template",Template_obj);
}

void Template_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_58_boot)
HXDLIN(  58)		splitter =  ::EReg_obj::__alloc( HX_CTX ,HX_("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()",e5,ee,5c,fe),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_59_boot)
HXDLIN(  59)		expr_splitter =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)",ea,08,2c,b0),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_60_boot)
HXDLIN(  60)		expr_trim =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[ ]*([^ ]+)[ ]*$",1c,7f,18,5f),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_61_boot)
HXDLIN(  61)		expr_int =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[0-9]+$",17,6b,c4,08),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_6336ddc62a4944c9_62_boot)
HXDLIN(  62)		expr_float =  ::EReg_obj::__alloc( HX_CTX ,HX_("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$",30,ca,4e,ef),HX_("",00,00,00,00));
            	}
{
            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_68_boot)
HXDLIN(  68)		globals =  ::Dynamic(hx::Anon_obj::Create(0));
            	}
{
            	HX_STACKFRAME(&_hx_pos_6336ddc62a4944c9_71_boot)
HXDLIN(  71)		hxKeepArrayIterator = ::cpp::VirtualArray_obj::__new(0)->iterator();
            	}
}

} // end namespace haxe
